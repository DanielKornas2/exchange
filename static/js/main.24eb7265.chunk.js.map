{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleCurrencyChoice","key","setState","chosenCurrency","handleMoneyAmount","e","target","value","moneyAmount","type","parseFloat","handleResetData","toggle","prevState","dropdownOpen","state","rates","_this2","fetch","then","response","json","responseData","_this3","_this$state","react_default","a","createElement","className","Dropdown","isOpen","DropdownToggle","caret","DropdownMenu","keys","map","DropdownItem","onClick","InputGroup","InputGroupAddon","addonType","Input","step","onChange","Number","toString","Button","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gVAwFeA,cAnFb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAmBRQ,qBAAuB,SAACC,GACtBR,EAAKS,SAAS,CACZC,eAAgBF,EAAIA,OAtBNR,EA0BlBW,kBAAoB,SAACC,IACfA,EAAEC,OAAOC,MAAQF,EAAEC,OAAOC,OAAS,IACrCd,EAAKS,SAAS,CACZM,YAAa,IAGjBf,EAAKS,SAAS,CACZM,YAA+B,WAAlBH,EAAEC,OAAOG,KAAoBC,WAAWL,EAAEC,OAAOC,OAASF,EAAEC,OAAOC,SAjClEd,EAqClBkB,gBAAkB,SAACN,GACjBZ,EAAKS,SAAS,CACZM,YAAa,EACbL,eAAgB,SAxCFV,EA4ClBmB,OAAS,WACPnB,EAAKS,SAAS,SAAAW,GAAS,MAAK,CAC1BC,cAAeD,EAAUC,iBA5C3BrB,EAAKsB,MAAQ,CACXC,MAAO,GACPR,YAAa,EACbL,eAAgB,MAChBW,cAAc,GANArB,mFAUC,IAAAwB,EAAArB,KACjBsB,MAAM,+EACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAACG,GACLL,EAAKf,SAAS,CACZc,MAAOM,EAAaN,2CAoCnB,IAAAO,EAAA3B,KAAA4B,EACsC5B,KAAKmB,MAA3CC,EADAQ,EACAR,MAAOb,EADPqB,EACOrB,eAAgBK,EADvBgB,EACuBhB,YAE9B,OACEiB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACdH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAUC,OAAQlC,KAAKmB,MAAMD,aAAcF,OAAQhB,KAAKgB,OAAQgB,UAAU,WACxEH,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAgBC,OAAK,GAArB,mBACAP,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACGvC,OAAOwC,KAAKlB,GAAOmB,IAAI,SAAClC,GACvB,OAAOwB,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAcnC,IAAKA,EAAKoC,QAAS,kBAAMd,EAAKvB,qBAAqB,CAACC,UAAQA,QAKzFwB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACdH,EAAAC,EAAAC,cAACW,EAAA,EAAD,KACGb,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAiBC,UAAU,WAA3B,UACAf,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAOhC,KAAK,SAASiC,KAAK,IAAIC,SAAU/C,KAAKQ,kBAAmBG,MAAOqC,OAAOpC,GAAaqC,cAH/F,MAKM1C,EAAiBa,EAAMb,GAAkBK,EAAe,KAL9D,IAKoEiB,EAAAC,EAAAC,cAAA,cAASxB,KAG7EsB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACfH,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAQT,QAASzC,KAAKe,gBAAiBiB,UAAU,WAAjD,4BA7EUmB,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzC,KAAK,SAAA0C,GACjCA,EAAaC","file":"static/js/main.24eb7265.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { InputGroup, InputGroupAddon, Input, Button, Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      rates: \"\",\n      moneyAmount: 0,\n      chosenCurrency: \"PLN\",\n      dropdownOpen: false\n    }\n  }\n\n  componentDidMount(){\n    fetch('http://data.fixer.io/api/latest?access_key=734ef11aaa5f72ab3a0bcb01826f7eb4')\n      .then(response => response.json())\n      .then((responseData)=> {\n        this.setState({\n          rates: responseData.rates,          \n        })\n      });  \n  }\n\n  handleCurrencyChoice = (key) => {\n    this.setState({\n      chosenCurrency: key.key,\n   })\n  }\n\n  handleMoneyAmount = (e) => {\n    if (e.target.value = e.target.value || 0){\n      this.setState({\n        moneyAmount: 0,\n      })\n    }\n    this.setState({\n      moneyAmount: e.target.type === 'number' ? parseFloat(e.target.value) : e.target.value,\n    })\n  }\n\n  handleResetData = (e) => {\n    this.setState({\n      moneyAmount: 0,\n      chosenCurrency: \"PLN\"\n    })\n  }\n\n  toggle = () => {\n    this.setState(prevState => ({\n      dropdownOpen: !prevState.dropdownOpen\n    }));\n  }\n\n\n  render() {\n    const {rates, chosenCurrency, moneyAmount} = this.state;\n\n    return (\n      <div className=\"container\">\n       <div className=\"row mt-3\">\n        <Dropdown isOpen={this.state.dropdownOpen} toggle={this.toggle} className=\"mx-auto\">\n          <DropdownToggle caret>Choose currency</DropdownToggle>\n          <DropdownMenu>\n            {Object.keys(rates).map((key) => {\n              return <DropdownItem key={key} onClick={() => this.handleCurrencyChoice({key})}>{key}</DropdownItem>;\n            })}\n         </DropdownMenu>\n        </Dropdown>\n       </div>\n      <div className=\"row mt-3\">\n        <div className=\"col-12 col-md-4 mx-auto\">\n         <InputGroup>\n            <InputGroupAddon addonType=\"prepend\">&euro;</InputGroupAddon>\n            <Input type=\"number\" step=\"1\" onChange={this.handleMoneyAmount} value={Number(moneyAmount).toString()} />\n         </InputGroup>\n          is {chosenCurrency? (rates[chosenCurrency] * moneyAmount) : null} <strong>{chosenCurrency}</strong>\n        </div>\n      </div>\n        <div className=\"row mt-3\">\n        <Button onClick={this.handleResetData} className=\"mx-auto\">Restore default</Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}